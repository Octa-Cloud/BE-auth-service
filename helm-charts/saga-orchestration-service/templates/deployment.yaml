apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "saga-orchestration-service.fullname" . }}
  labels:
    {{- include "saga-orchestration-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "saga-orchestration-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "saga-orchestration-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "saga-orchestration-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          valueFrom:
            configMapKeyRef:
              name: {{ include "saga-orchestration-service.fullname" $ }}
              key: {{ $key }}
        {{- end }}
        {{- if .Values.secrets.create }}
        {{- range $key, $value := .Values.secrets }}
        {{- if and (ne $key "create") (ne $key "name") }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ include "saga-orchestration-service.fullname" $ }}
              key: {{ $key }}
        {{- end }}
        {{- end }}
        {{- end }}
        livenessProbe:
          {{- toYaml .Values.livenessProbe | nindent 12 }}
        readinessProbe:
          {{- toYaml .Values.readinessProbe | nindent 12 }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.cloudSqlProxy.enabled }}
      - name: cloud-sql-proxy
        image: {{ .Values.cloudSqlProxy.image }}
        command:
        - /cloud_sql_proxy
        - -instances={{ .Values.cloudSqlProxy.instance }}=tcp:{{ .Values.cloudSqlProxy.port }}
        - -credential_file=/secrets/cloudsql/credentials.json
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - name: cloudsql-instance-credentials
          mountPath: /secrets/cloudsql
          readOnly: true
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.cloudSqlProxy.enabled }}
      volumes:
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloud-sql-instance-credentials
      {{- end }}
